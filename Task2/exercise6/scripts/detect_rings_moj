#!/usr/bin/python3

import sys
import rospy
import cv2
import numpy as np
import tf2_geometry_msgs
import tf2_ros
from sensor_msgs.msg import Image
from geometry_msgs.msg import PointStamped, Vector3, Pose
from cv_bridge import CvBridge, CvBridgeError
from visualization_msgs.msg import Marker, MarkerArray
from std_msgs.msg import ColorRGBA
import itertools as it
from move_base_msgs.msg import MoveBaseActionFeedback
from math import isnan 


class The_Ring:
    def __init__(self):
        rospy.init_node('image_converter', anonymous=True)

        # An object we use for converting images between ROS format and OpenCV format
        self.bridge = CvBridge()

        # A help variable for holding the dimensions of the image
        self.dims = (0, 0, 0)

        # Marker array object used for visualizations
        self.marker_array = MarkerArray()
        self.marker_num = 1

        # Subscribe to the image and/or depth topic
        self.image_sub = rospy.Subscriber("/camera/rgb/image_raw", Image, self.image_callback)
        #self.depth_sub = rospy.Subscriber("/camera/depth_registered/image_raw", Image, self.depth_callback)

        # Publiser for the visualization markers
        self.markers_pub = rospy.Publisher('markers', MarkerArray, queue_size=1000)

        # Object we use for transforming between coordinate frames
        self.tf_buf = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buf)


    def get_pose(self, e, dist):
        # Calculate the position of the detected ellipse

        k_f = 525 # kinect focal length in pixels

        #print(f"{e = }")
        print(f"{dist = }")

        elipse_x = self.dims[1] / 2 - e[0][0]
        elipse_y = self.dims[0] / 2 - e[0][1]

        #print(f"{elipse_x, elipse_y = }")

        angle_to_target = np.arctan2(elipse_x,k_f)

        #print(f"{angle_to_target = }")
        # Get the angles in the base_link relative coordinate system
        x,y = dist*np.cos(angle_to_target), dist*np.sin(angle_to_target)
        

        #print(f"{x, y = }")

        ### Define a stamped message for transformation - directly in "base_frame"
        """point_s = PointStamped()
        point_s.point.x = x
        point_s.point.y = y
        point_s.point.z = 0.3
        point_s.header.frame_id = "base_link"
        point_s.header.stamp = rospy.Time(0)"""

       
        # Define a stamped message for transformation - in the "camera rgb frame"
        point_s = PointStamped()
        point_s.point.x = -y
        point_s.point.y = 0
        point_s.point.z = x
        point_s.header.frame_id = "camera_rgb_optical_frame"
        point_s.header.stamp = rospy.Time(0)

        #print(f"{point_s = }")
        
        # Get the point in the "map" coordinate system
        point_world = self.tf_buf.transform(point_s, "map")

        #print(f"{point_world = }")
        # Create a Pose object with the same position
        pose = Pose()
    

        pose.position.x = point_world.point.x
        pose.position.y = point_world.point.y
        pose.position.z = point_world.point.z

        #print(f"{pose = }")
        #global last_feedback

        #pose.position.x += last_feedback.feedback.base_position.pose.position.x
        #pose.position.y += last_feedback.feedback.base_position.pose.position.y
        # Create a marker used for visualization
        self.marker_num += 1
        marker = Marker()
        marker.header.stamp = point_world.header.stamp
        marker.header.frame_id = point_world.header.frame_id
        marker.pose = pose
        marker.type = Marker.CUBE
        marker.action = Marker.ADD
        marker.frame_locked = False
        marker.lifetime = rospy.Duration.from_sec(0)
        marker.id = self.marker_num
        marker.scale = Vector3(0.1, 0.1, 0.1)
        marker.color = ColorRGBA(0, 1, 0, 1)
        #print(f"{marker = }")
        if self.check_if_marked(marker):
            self.marker_array.markers.append(marker)

        self.markers_pub.publish(self.marker_array)


    def check_if_marked(self, newMarker):
        for marker in self.marker_array.markers:
            if abs(newMarker.pose.position.x - marker.pose.position.x) < 0.5\
                and abs(newMarker.pose.position.y - marker.pose.position.y) < 0.5:
                        return False
        return True

    def image_callback(self,data):
        global ns
        ns +=1
        if ns % 10 != 0:
            return
        ns = 0
        print('I got a new image!')

        try:
            cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
        except CvBridgeError as e:
            print(e)

        # Set the dimensions of the image
        self.dims = cv_image.shape

        # Tranform image to gayscale & Do histogram equlization
        img = cv2.equalizeHist(cv2.cvtColor(cv_image, cv2.COLOR_BGR2GRAY))

        # Binarize the image, there are different ways to do it
        #ret, thresh = cv2.threshold(img, 50, 255, 0)
        #ret, thresh = cv2.threshold(img, 70, 255, cv2.THRESH_BINARY)
        thresh = cv2.adaptiveThreshold(img, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 15, 25)

        # Extract contours
        contours, _ = cv2.findContours(thresh, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)

        # Example how to draw the contours, only for visualization purposes
        cv2.drawContours(img, contours, -1, (255, 0, 0), 3)
        cv2.imshow("Contour window",img)
        cv2.waitKey(1)

        # Fit elipses to all extracted contours
        elps = [cv2.fitEllipse(cnt) for cnt in contours if cnt.shape[0] >= 20]
        #for cnt in contours:
            #     print cnt
            #     print cnt.shape
        #    if cnt.shape[0] >= 20:
        #        ellipse = cv2.fitEllipse(cnt)
        #        elps.append(ellipse)


        # Find two elipses with same centers
            
        #for n in range(len(elps)):
        #    for m in range(n + 1, len(elps)):
        #        e1 = elps[n]
        #        e2 = elps[m]
        candidates =[(e1, e2) 
                        for e1, e2 in it.combinations(elps, 2)
                        if np.sqrt(((e1[0][0] - e2[0][0]) ** 2 + (e1[0][1] - e2[0][1]) ** 2)) < 0.5
                    ]
        #for e1, e2 in it.combinations(elps, 2):

        #    dist = np.sqrt(((e1[0][0] - e2[0][0]) ** 2 + (e1[0][1] - e2[0][1]) ** 2))
            #print(f"{dist = }")
            #print(f"{e1 = }")
            #print(f"{e2 = }")
        #    if dist < 0.5:
                #print("CANDIDATES")
        #        append = True
                #for c in candidates:
                #    print(f"{c[0] = }")
                #    print(f"{c[1] = }")
                #    print(f"{e1 = }")
                #    print(f"{e2 = }")
        #        if append:
        #            candidates.append((e1,e2))

        print("Processing is done! found", len(candidates), "candidates for rings")

        try:
            depth_img = rospy.wait_for_message('/camera/depth/image_raw', Image)
        except Exception as e:
            print(e)


        # Extract the depth from the depth image
        for e1, e2 in candidates:
            # drawing the ellipses on the image
            cv2.ellipse(cv_image, e1, (0, 255, 0), 2)
            cv2.ellipse(cv_image, e2, (0, 255, 0), 2)

            size = (e1[1][0]+e1[1][1])/2
            center = (e1[0][1], e1[0][0])
            if center[0] > 240:
                print(f"zavrnu ring ker je prenizko at {center}")
                continue

            x1 = int(center[0] - size / 2)
            x2 = int(center[0] + size / 2)
            x_min = x1 if x1>0 else 0
            x_max = x2 if x2<cv_image.shape[0] else cv_image.shape[0]

            y1 = int(center[1] - size / 2)
            y2 = int(center[1] + size / 2)
            y_min = y1 if y1 > 0 else 0
            y_max = y2 if y2 < cv_image.shape[1] else cv_image.shape[1]
            
            depth_image = self.bridge.imgmsg_to_cv2(depth_img, "passthrough")
            #
            #FAKE RING DETECTOR
            print(depth_image[int(center[0]), int(center[1])])
            check = False
            for i in range(int(center[0]) - 5, int(center[0]) + 5):
                for j in range(int(center[1]) - 5, int(center[1]) + 5):
                    if not isnan(depth_image[i][j]):
                        check = True
                        
            if check:
                print(f"zavrnu ring ker je fake at {center}")
                continue
                
            """if not isnan(depth_image[int(center[0]) - 5:int(center[0]) + 5, int(center[1]) - 5:int(center[1]) + 5]):
                print(f"zavrnu ring ker je fake at {center}")
                continue"""
            
            #ZA VIZUALIZACIJO NARDI CENTER RINGA NA DEPTH IMAGE BEU
            """print(f"{center = }")
            print(f"{depth_image.shape = }")
            or row in depth_image[x_min:x_max,y_min:y_max]:
                print(row)
            cv_image_array = np.array(depth_image, dtype = np.dtype('f8'))
            cv_image_norm = cv2.normalize(cv_image_array, cv_image_array, 0, 1, cv2.NORM_MINMAX)
            cv_image_resized = cv2.resize(cv_image_norm, (640, 480), interpolation = cv2.INTER_CUBIC)
            cv2.imshow("Depth windwow", cv_image_resized)"""
            
            #depth_image = np.array(depth_image, dtype="float16")
            #depth_image[depth_image == 0] = np.nan
            distance = float(np.nanmean(depth_image[x_min:x_max,y_min:y_max]))
            self.get_pose(e1, distance)
            
            

        if len(candidates)>0:
            #depth_image = self.bridge.imgmsg_to_cv2(depth_img, "16UC1")
            #depth_image = depth_image * 50
            #cv2.imshow("Depth windwow", depth_image)
            cv2.imshow("Image window",cv_image)
            cv2.waitKey(1)

    def depth_callback(self,data):
        try:
            depth_image = self.bridge.imgmsg_to_cv2(data, "16UC1")
        except CvBridgeError as e:
            print(e)

        # Do the necessairy conversion so we can visuzalize it in OpenCV
        image_1 = depth_image / 65536.0 * 255
        image_1 =image_1/np.max(image_1)*255

        image_viz = np.array(image_1, dtype= np.uint8)

        cv2.imshow("Depth window", image_viz)
        cv2.waitKey(1)

ns=0

def main():

    ring_finder = The_Ring()

    try:
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting down")

    cv2.destroyAllWindows()


if __name__ == '__main__':
    main()
